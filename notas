

curl -H "Content-Type: application/json" -X POST -d '
{"username":"xyz","password":"xyz"}
' http://localhost:9092/widgets


curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '{ "id": 666, "name" : "villa" }' http://localhost:9092/widgets



        // Simulate the creation of a widget. This call is handled in-line and not through the per-request handler.
        entity(as[Widget]) { widget =>
          respondWithMediaType(`application/json`) {
            // Push the handling to another context so that we don't block

            def rawJson = extract { _.request.entity.asString} 

            println( rawJson )

            createWidget(widget)

            //def rawJson = extract { _.request.entity.asString} 

            //val json = widget
            //val futureScala = twitter2ScalaFuture.apply( FinagleClient.documentSearch( index, indexType, json ) )
      
            //futureScala.map( f => 
            //  Ok( Json.parse( f.getContent.toString(CharsetUtil.UTF_8) ) )
            //)



          }
        }



        {

          "size": 10,
          "query": {
            "match": {
              "_all": {
                "query": $('#term').val(),
                "operator": "and"
              }
            }
          },
          "sort" : [
            {"colonia" : {"order" : "asc", "mode" : "avg"}}
          ]
        };



 	val json =
      		("name"        -> item.name.toString )~
      		("slug"        -> item.slug.toString )~
      		("description" -> item.description.toString )~
      		("username"    -> user.username.toString )


    val json = """ {
      "size": 10,
      "query": {
        "match": {
          "_all": {
            "query": """ + term + """,
            "operator": "and"
          }
        }
      },
      "sort" : [
        {"colonia" : {"order" : "asc", "mode" : "avg"}}
      ]
    }"""



    curl -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '{ "id": 666, "name" : "villa" }' http://localhost:9092/widgets


            respondWithHeaders( 
              RawHeader("Access-Control-Allow-Origin","*"), 
              RawHeader("Host", "http://localhost"),
              RawHeader("Origin", "http://localhost"),
              RawHeader("Allow", "*"),
              RawHeader("Access-Control-Request-Method", "PUT, GET, POST, DELETE, OPTIONS"),
              RawHeader("Access-Control-Allow-Headers", "origin, content-type, accept")
            ) {
    


[info]   | +-com.typesafe:config:1.2.1
[info]   | +-io.dropwizard.metrics:metrics-core:3.1.1
[info]   | | +-org.slf4j:slf4j-api:1.7.12
[info]   | | +-org.slf4j:slf4j-api:1.7.7 (evicted by: 1.7.12)
[info]   | | 
[info]   | +-io.dropwizard.metrics:metrics-jvm:3.1.1
[info]   | | +-io.dropwizard.metrics:metrics-core:3.1.1
[info]   | | | +-org.slf4j:slf4j-api:1.7.12
[info]   | | | +-org.slf4j:slf4j-api:1.7.7 (evicted by: 1.7.12)
[info]   | | | 
[info]   | | +-org.slf4j:slf4j-api:1.7.12
[info]   | | +-org.slf4j:slf4j-api:1.7.7 (evicted by: 1.7.12)



what-depends-on io.dropwizard.metrics metrics-core 3.1.1

